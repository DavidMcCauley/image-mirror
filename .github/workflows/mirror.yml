name: Mirror Public Docker Images

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Runs on a schedule (every Sunday at midnight UTC)
  schedule:
    - cron: '0 0 * * 0'

jobs:
  mirror:
    name: Mirror Docker Hub Image to GHCR
    runs-on: ubuntu-latest
    permissions:
      # Required to write packages to the repo's container registry
      packages: write
      contents: read # Required to install jq

    # A matrix allows us to easily define a list of images to mirror
    strategy:
      matrix:
        image:
          - 'grafana/grafana:9.5.3'
          - 'grafana/loki:2.8.2'
          - 'grafana/promtail:2.8.2'
          - 'traefik:v2.10'
          - 'prom/prometheus:v2.45.0'
          - 'gcr.io/cadvisor/cadvisor:v0.47.1'
          - 'python:3.10-slim'
          - 'quay.io/keycloak/keycloak:22.0.5'
          # Add any other public images you want to mirror here
          # - 'redis:7.0'
          # - 'postgres:15'

    steps:
      - name: Install jq
        uses: dcarbone/install-jq-action@v2.1.0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Digests and Mirror if Necessary
        run: |
          # The original image name from Docker Hub (e.g., grafana/loki:2.8.2)
          SOURCE_IMAGE="${{ matrix.image }}"
          
          # Convert the repository owner's name to lowercase
          OWNER_LOWERCASE=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          
          # The new image name for GHCR. We replace '/' with '-' for a clean name.
          TARGET_IMAGE="ghcr.io/$OWNER_LOWERCASE/$(echo $SOURCE_IMAGE | sed 's/\//-/g')"
          
          echo "Source: $SOURCE_IMAGE"
          echo "Target: $TARGET_IMAGE"
          
          # Get the digest of the source image from Docker Hub
          SOURCE_DIGEST=$(docker manifest inspect $SOURCE_IMAGE | jq -r '.digest')
          echo "Source Digest: $SOURCE_DIGEST"
          
          # Get the digest of the target image from GHCR.
          # If it doesn't exist, the command will fail, and we'll default the digest to "not_found".
          TARGET_DIGEST=$(docker manifest inspect $TARGET_IMAGE | jq -r '.digest' || echo "not_found")
          echo "Target Digest: $TARGET_DIGEST"
          
          # Compare the digests. If they are the same, skip.
          if [ "$SOURCE_DIGEST" == "$TARGET_DIGEST" ]; then
            echo "âœ… Digests match. Skipping mirror for $TARGET_IMAGE."
            exit 0
          fi
          
          # If digests do not match or target doesn't exist, proceed with mirroring.
          echo "Digests do not match or target image not found. Proceeding with mirror."
          echo "Pulling from Docker Hub..."
          docker pull $SOURCE_IMAGE
          
          echo "Retagging for GHCR..."
          docker tag $SOURCE_IMAGE $TARGET_IMAGE
          
          echo "Pushing to GHCR..."
          docker push $TARGET_IMAGE
