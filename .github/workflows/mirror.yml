name: Mirror and Cleanup Public Docker Images

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Runs on a schedule (every Sunday at midnight UTC)
  schedule:
    - cron: '0 0 * * 0'
  # Run when a pull request changes the image list, to validate it
  pull_request:
    paths:
      - 'images.txt'

jobs:
  generate-matrix:
    name: Generate Job Matrix
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.set-matrix.outputs.images }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate image matrix from images.txt
        id: set-matrix
        run: |
          # Read the images.txt file, filter out empty lines/comments, and format as a JSON array
          IMAGES_JSON=$(grep -vE '^\s*#|^\s*$' images.txt | jq -R . | jq -s -c .)
          echo "images=${IMAGES_JSON}" >> $GITHUB_OUTPUT

  mirror:
    name: Mirror Docker Hub Image to GHCR
    needs: generate-matrix
    runs-on: ubuntu-latest
    if: needs.generate-matrix.outputs.images != '[]'
    permissions:
      packages: write
      contents: read

    strategy:
      matrix:
        image: ${{ fromJson(needs.generate-matrix.outputs.images) }}

    steps:
      - name: Install jq
        uses: dcarbone/install-jq-action@v2.1.0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Digests and Mirror if Necessary
        run: |
          SOURCE_IMAGE="${{ matrix.image }}"
          OWNER_LOWERCASE=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          TARGET_IMAGE="ghcr.io/$OWNER_LOWERCASE/$(echo $SOURCE_IMAGE | sed 's/\//-/g')"

          echo "Source: $SOURCE_IMAGE"
          echo "Target: $TARGET_IMAGE"

          SOURCE_DIGEST=$(docker manifest inspect $SOURCE_IMAGE | jq -r '.digest')
          echo "Source Digest: $SOURCE_DIGEST"

          TARGET_DIGEST=$(docker manifest inspect $TARGET_IMAGE | jq -r '.digest' || echo "not_found")
          echo "Target Digest: $TARGET_DIGEST"

          if [ "$SOURCE_DIGEST" == "$TARGET_DIGEST" ]; then
            echo "Digests match. Skipping mirror for $TARGET_IMAGE."
            exit 0
          fi

          echo "Digests do not match or target image not found. Proceeding with mirror."
          echo "Pulling from Docker Hub..."
          docker pull $SOURCE_IMAGE

          echo "Retagging for GHCR..."
          docker tag $SOURCE_IMAGE $TARGET_IMAGE

          echo "Pushing to GHCR..."
          docker push $TARGET_IMAGE

  cleanup:
    name: Cleanup Old Mirrored Images
    needs: [generate-matrix, mirror]
    runs-on: ubuntu-latest
    # Only run the cleanup on scheduled runs or manual dispatches, not on PRs
    if: success() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    permissions:
      packages: write

    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.generate-matrix.outputs.images) }}

    steps:
      - name: Generate package name for ${{ matrix.image }}
        id: package_info
        run: |
          IMAGE_NO_TAG=$(echo "${{ matrix.image }}" | cut -d: -f1)
          PACKAGE_NAME=$(echo "$IMAGE_NO_TAG" | sed 's/\//-/g')
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Cleanup old versions for package ${{ steps.package_info.outputs.package_name }}
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ steps.package_info.outputs.package_name }}
          package-type: 'container'
          owner: ${{ github.repository_owner }}
          min-versions-to-keep: 1
